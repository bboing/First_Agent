services:
  # Backend Service
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: sub_lang_backend
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - MILVUS_HOST=standalone
      - MILVUS_PORT=19530
      - MINIO_HOST=minio
      - MINIO_PORT=9000
    volumes:
      - ../backend:/app
      - ../logs:/app/logs
      - ../.env:/app/.env
    depends_on:
      - postgres
      - redis
      - standalone
      - minio
    networks:
      - custom-net

  # Frontend Service
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: sub_lang_frontend
    ports:
      - "3000:3000"
    volumes:
      - ../frontend:/app
      - ../.env:/app/.env
    environment:
      - BACKEND_API_URL=http://backend:8000
    depends_on:
      - backend
    networks:
      - custom-net

  postgres:
    image: postgres:15
    container_name: pg
    # restart: always
    environment:
      POSTGRES_USER: taegyun93
      POSTGRES_PASSWORD: taegyun93!
      POSTGRES_DB: agent_db
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - custom-net

  redis:
    image: redis:7
    container_name: redis
    # restart: always
    ports:
      - "6379:6379"
    networks:
      - custom-net

  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.18
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://etcd:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - custom-net

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - minio_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - custom-net

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.5.10
    command: ["milvus", "run", "standalone"]
    security_opt:
    - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - milvus_data:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - custom-net

  attu:
    container_name: milvus-attu
    image: zilliz/attu:v2.5.10
    environment:
      MILVUS_URL: standalone:19530
    ports:
      - "3001:3000"
    depends_on:
      - "standalone"
    networks:
      - custom-net

volumes:
  pgdata:
  milvus_data:
  etcd_data:
  minio_data:

networks:
  custom-net:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.100.0/24
          gateway: 192.168.100.1
